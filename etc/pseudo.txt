# Sex
```
Algorithm sex
	input: *list - PtList

BEGIN

size <- 0, fem <- 0,  male <- 0, ukn <- 0
listSize(*list, &size)
listElem pat
FOR i <- 0 to size-1 DO
	listGet(*list, i, &pat)
	IF strcmp(pat.sex, "female") = 0 THEN
		fem <- fem + 1
	ELSE IF strcmp(pat.sex, "male") = 0 THEN
		male <- male + 1
	ELSE
		ukn++
	END IF
END FOR

PRINT "Percentage of Females: "$(round(fem * 100/size))""
PRINT "Percentage of Males: "$(round(male * 100/size))""
PRINT "Percentage of Unknown: "$(round(ukn * 100/size))""
PRINT "Total: $size"

END
```

# Matrix
```
Algorithm matrixGenerator
	input: *list - PtList

BEGIN

IF list != NULL THEN
	*fieldsOne <- ageGapArray(list, 0, 15)
	*fieldsTwo <- ageGapArray(list, 16, 30)
	*fieldsThree <- ageGapArray(list, 31, 45)
	*fieldsFour <- ageGapArray(list, 46, 60)
	*fieldsFive <- ageGapArray(list, 61, 75)
	*fieldsSix <- ageGapArray(list, 76, $INVALID_FIELD)

	PRINT "|Age Gap\t|Isolated\t|Deceased\t|\t|\n"
	PRINT "|[0-15]\t|$fieldsOne[0]\t|$fieldsOne[1]\t|$fieldsOne[2]\t|\n"
	PRINT "|[16-30]\t|$fieldsTwo[0]\t|$fieldsTwo[1]\t|$fieldsTwo[2]\t|\n"
	PRINT "|[31-45]\t|$fieldsThree[0]\t|$fieldsThree[1]\t|$fieldsThree[2]\t|\n"
	PRINT "|[46-60]\t|$fieldsFour[0]\t|$fieldsFour[1]\t|$fieldsFour[2]\t|\n"
	PRINT "|[61-75]\t|$fieldsFive[0]\t|$fieldsFive[1]\t|$fieldsFive[2]\t|\n"
	PRINT "|[76-...]\t|$fieldsSix[0]\t|$fieldsSix[1]\t|$fieldsSix[2]\t|\n"

	free(fieldsOne)
	free(fieldsTwo)
	free(fieldsThree)
	free(fieldsFour)
	free(fieldsFive)
	free(fieldsSix)
END IF

END
```

# Regions
```
Algorithm regionsAlphaOrder
	input: *regions - PtMap
	       *patients - PtList


BEGIN

pSize <- 0
listSize(*patients, &pSize)
ListElem el1

mSize <- 0
mapSize(*regions, &mSize)

*mkaux <- (MapKey *) calloc(mSize + 1, sizeOf(MapKey))
*mk <- mapKeys(*regions)

FOR i <- 0 TO mSize DO
	for j <- 0 TO pSize -1 DO
		listGet(*patients, j, &el1)
		IF strcmp(el1.region, mk[i].str) = 0 THEN
			IF strcmp(el1.status, "isolated") = 0 THEN
				mkaux[i] <- mk[i]
			END IF
		END IF
	END FOR
END FOR

qsort(mkaux, mSize, sizeof(MapKey), compareTo)

FOR i <- 0 TO mSize DO
	keyStringPrint(mkaux[i])
	PRINT "\n"
END FOR

free(mk)
free(mkaux)
```
